"""Add translation code columns to categories

Revision ID: b2e347d6417c
Revises: 
Create Date: 2025-09-29 20:39:28.029413

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b2e347d6417c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('admin_users', schema=None) as batch_op:
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=80),
               existing_nullable=False)
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True)

    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name_code', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('description_code', sa.String(length=100), nullable=True))

    # Update existing categories with translation codes
    op.execute("""
        UPDATE categories SET
            name_code = CASE
                WHEN name = 'Electronics' THEN 'categories.electronics'
                WHEN name = 'Clothing' THEN 'categories.clothing'
                WHEN name = 'Home & Garden' THEN 'categories.home_garden'
                WHEN name = 'Books' THEN 'categories.books'
                WHEN name = 'Sports & Outdoors' THEN 'categories.sports_outdoors'
                WHEN name = 'Beauty & Health' THEN 'categories.beauty_health'
                ELSE 'categories.' || LOWER(REPLACE(REPLACE(name, ' ', '_'), '&', 'and'))
            END,
            description_code = CASE
                WHEN name = 'Electronics' THEN 'categories.electronics_description'
                WHEN name = 'Clothing' THEN 'categories.clothing_description'
                WHEN name = 'Home & Garden' THEN 'categories.home_garden_description'
                WHEN name = 'Books' THEN 'categories.books_description'
                WHEN name = 'Sports & Outdoors' THEN 'categories.sports_outdoors_description'
                WHEN name = 'Beauty & Health' THEN 'categories.beauty_health_description'
                ELSE 'categories.' || LOWER(REPLACE(REPLACE(name, ' ', '_'), '&', 'and')) || '_description'
            END
    """)

    # Make columns NOT NULL
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.alter_column('name_code', nullable=False)
        batch_op.alter_column('description_code', nullable=False)

    with op.batch_alter_table('newsletter_subscriptions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('preferences', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.drop_column('subscribed_at')
        batch_op.drop_column('unsubscribed_at')

    with op.batch_alter_table('site_settings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('key', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('value', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('setting_type', sa.String(length=50), nullable=True))
        batch_op.drop_constraint(batch_op.f('site_settings_setting_key_key'), type_='unique')
        batch_op.create_unique_constraint(None, ['key'])
        batch_op.drop_column('setting_value')
        batch_op.drop_column('setting_key')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('site_settings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('setting_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('setting_value', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_unique_constraint(batch_op.f('site_settings_setting_key_key'), ['setting_key'], postgresql_nulls_not_distinct=False)
        batch_op.drop_column('setting_type')
        batch_op.drop_column('value')
        batch_op.drop_column('key')

    with op.batch_alter_table('newsletter_subscriptions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('unsubscribed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('subscribed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_column('created_at')
        batch_op.drop_column('preferences')
        batch_op.drop_column('name')

    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.drop_column('description_code')
        batch_op.drop_column('name_code')

    with op.batch_alter_table('admin_users', schema=None) as batch_op:
        batch_op.alter_column('role',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
        batch_op.alter_column('username',
               existing_type=sa.String(length=80),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)

    # ### end Alembic commands ###
